name: deploy

on:
  push:
    branches: [master]
 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Set ProdDB url
        run: |
          echo "DATABASE_URL=${{secrets.DATABASE_URL}}" > ./server/.env
          cat ./server/.env

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Cat ProdDB url
        run: |
          # echo "DATABASE_URL=${{secrets.DATABASE_URL}}" > ./server/.env
          cat ./server/.env
      
      - name: Docker build
        run: docker-compose build
        
      - name: Docker push
        run: docker-compose push
          
      # - name: "Install OCI CLI"
      #   run: |
      #     curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
      #     chmod +x install.sh
      #     ./install.sh --accept-all-defaults
      #     echo "/home/runner/bin" >> $GITHUB_PATH
      #     exec -l $SHELL

      # - name: "Check OCI Version"
      #   run: |
      #     oci -v

      # - name: "Write Config & Key Files"
      #   run: |
      #     mkdir ~/.oci
      #     echo "[DEFAULT]" >> ~/.oci/config
      #     echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
      #     echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
      #     echo "pass_phrase=${{secrets.OCI_KEY_PASSPHRASE}}" >> ~/.oci/config
      #     echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
      #     echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
      #     echo "key_file=~/.oci/key.pem" >> ~/.oci/config
      #     echo "${{secrets.OCI_KEY_FILE_CONTENT}}" >> ~/.oci/key.pem

      # - name: "Fix Config File Permissions"
      #   run: |
      #     oci setup repair-file-permissions --file /home/runner/.oci/config
      #     oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      # - name: "Use Existing Instance to deploy"
      #   run: |
      #     echo "::set-env name=INSTANCE_OCID::$( \
      #       oci compute instance list \
      #       --lifecycle-state RUNNING \
      #       --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
      #       --display-name cicd-demo \
      #       --query "data [0].id" \
      #       --raw-output \
      #     )"
