name: deploy

on:
  push:
    branches: [master]

  workflow_dispatch:

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # - name: Migrate DB Schema to Prod
      #   run: bash ./bin/deploy.sh

      # - name: Docker build
      #   run: docker-compose build

      # - name: Docker Login
      #   uses: docker/login-action@v2.0.0
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Docker push
      #   run: docker-compose push

      # - name: "Install OCI CLI"
      #   run: |
      #     curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
      #     chmod +x install.sh
      #     ./install.sh --accept-all-defaults
      #     echo "/home/runner/bin" >> $GITHUB_PATH
      #     exec -l $SHELL

      # - name: "Check OCI Version"
      #   run: |
      #     oci -v

      # - name: "Write Config & Key Files"
      #   run: |
      #     mkdir ~/.oci
      #     echo "[DEFAULT]" >> ~/.oci/config
      #     echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
      #     echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
      #     echo "pass_phrase=${{secrets.OCI_KEY_PASSPHRASE}}" >> ~/.oci/config
      #     echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
      #     echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
      #     echo "key_file=~/.oci/key.pem" >> ~/.oci/config
      #     echo "${{secrets.OCI_KEY_FILE_CONTENT}}" >> ~/.oci/key.pem

      # - name: "Fix Config File Permissions"
      #   run: |
      #     oci setup repair-file-permissions --file /home/runner/.oci/config
      #     oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      # - name: "Use Existing Instance to deploy"
      #   run: |
      #     echo "INSTANCE_OCID=$( \
      #       oci compute instance list \
      #       --lifecycle-state RUNNING \
      #       --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
      #       --display-name dev-server \
      #       --query "data [0].id" \
      #       --raw-output \
      #     )" >> $GITHUB_ENV

      # - name: "Get Instance IP"
      #   run: |
      #     echo "INSTANCE_IP=$( \
      #       oci compute instance list-vnics \
      #       --instance-id ${INSTANCE_OCID} \
      #       --query 'data [0]."public-ip"' \
      #       --raw-output \
      #     )" >> $GITHUB_ENV

      - name: "Wait for SSH"
        run: |
          while ! nc -w5 -z ${{secrets.VM_SSH_IP}} 22; do
                  sleep 5
                  echo "SSH not available..."
          done; echo "SSH ready!"

      - name: Copy docker-compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_SSH_IP }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml"
          target: "/tmp/docker-compose.yml"

      - name: "Restart Containers"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_SSH_IP }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export DATABASE_URL=${DATABASE_URL}
            sudo rm -f /home/docker-compose.yml
            sudo mv /tmp/docker-compose.yml /home/docker-compose.yml
            cd /home
            sudo docker-compose down
            sudo docker-compose rm -f manikandan305/annotator manikandan305/segmenter
            sudo docker image rm -f manikandan305/annotator manikandan305/segmenter
            sudo docker-compose up -d --force-recreate annotator segmenter
